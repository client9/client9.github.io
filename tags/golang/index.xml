<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Nick Galbreath</title><link>https://www.client9.com/tags/golang/</link><description>Recent content in Golang on Nick Galbreath</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2018 Nick Galbreath</copyright><lastBuildDate>Mon, 21 May 2018 05:17:20 +0000</lastBuildDate><atom:link href="https://www.client9.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging Packages in Golang</title><link>https://www.client9.com/logging-packages-in-golang/</link><pubDate>Mon, 21 May 2018 05:17:20 +0000</pubDate><guid>https://www.client9.com/logging-packages-in-golang/</guid><description>Out of the 35 packages in Awesome Go, a majority are obsolete, duplicative or fail to address what problem they are trying to solve. Of the remaining (and some not on the list), they fall into four categories.
Basics General purpose Performance focused Composable The Basics The basics are just that - there do the job and are common or installed by default. However none of these support context logging or structured logging.</description></item><item><title>Structured Logging in Golang</title><link>https://www.client9.com/structured-logging-in-golang/</link><pubDate>Sun, 13 May 2018 17:54:22 +0000</pubDate><guid>https://www.client9.com/structured-logging-in-golang/</guid><description>Out of the box, golang provides the stdlib/log package. It provides “printf” style logging. A template string is used along with a list of arguments, and a log message is generated:
log.Printf(&amp;#34;user %d wasn&amp;#39;t found&amp;#34;, 1234) // user 1234 wasn&amp;#39;t found This dynamically generated message is easy and convenient but has a number of issues involving storage, searching, and consistency.
Structured logging solves these problems by replacing the printf message template with named-fields.</description></item><item><title>Reduce Golang Binary Size by 20 Percent</title><link>https://www.client9.com/reduce-golang-binary-size-by-20-percent/</link><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/reduce-golang-binary-size-by-20-percent/</guid><description>I first read about this on Shrink your go binaries with this one weird trick by Filippo Valsorda. That&amp;#39;s from 2016, but I retested on golang 1.8.1 1.10.0.
Just add -ldflags=&amp;#34;-s -w&amp;#34; to your build and watch the output size drop by 20%.
go build -ldflags=&amp;#34;-s -w&amp;#34; This strips away a bunch of symbols that are only used by debuggers. If you don&amp;#39;t use them, then everything else is the same, including panic stack traces.</description></item><item><title>Golang globs and the Double Star Glob Operator</title><link>https://www.client9.com/golang-globs-and-the-double-star-glob-operator/</link><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/golang-globs-and-the-double-star-glob-operator/</guid><description>The golang filepath/glob and filepath/match functions provide glob matching but does not support the &amp;#34;double star&amp;#34;, &amp;#34;double asterisk&amp;#34;, &amp;#34;globstar&amp;#34;, &amp;#34;super glob&amp;#34;, &amp;#34;super wildcard&amp;#34; operation that descends into other directories. According to Issue 11862 the problem seems to be handling edge cases like crossing file system boundaries, symlinks and infinite loops (if I read @rsc&amp;#39;s comment correctly).
In the meantime, one of these packages might work:
mattn/go-zglob looks very optimized for filewalking bmatcuk/doublestar appears to be the most mature godo/glob.</description></item><item><title>Golang and Gracefully Handling Lists in Configuration Files</title><link>https://www.client9.com/article/golang-and-gracefully-handling-lists-in-configuration-files/</link><pubDate>Fri, 05 Feb 2016 16:01:07 -0800</pubDate><guid>https://www.client9.com/article/golang-and-gracefully-handling-lists-in-configuration-files/</guid><description>&lt;p&gt;Most configuration files are processed using &amp;lsquo;object unmarshaling&amp;rsquo; (or
deserialization) into internal data structures. While this is easy
and fast, it&amp;rsquo;s not very flexible for &lt;em&gt;configuration&lt;/em&gt;. In most cases
a &amp;ldquo;single value&amp;rdquo; and an element with a single value are treated
differently.&lt;/p&gt;</description></item><item><title>Secure Application Development with Golang</title><link>https://www.client9.com/secure-application-development-with-golang/</link><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>https://www.client9.com/secure-application-development-with-golang/</guid><description>First presented at RSA USA 2015, Session ASD-F02 on April 24, 2015 in San Francisco, California.
This might be the worst slide template I have ever used:
Fonts are too small Fonts are microsoft-specific Font color is grey Background is grey Background has pattern It would seem it’s specifically designed for not-reading. But if you can read it, the deck is still accurate in 2018.</description></item></channel></rss>