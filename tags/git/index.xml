<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Nick Galbreath</title><link>https://www.client9.com/tags/git/</link><description>Recent content in git on Nick Galbreath</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2018 Nick Galbreath</copyright><lastBuildDate>Tue, 01 May 2018 19:41:51 +0000</lastBuildDate><atom:link href="https://www.client9.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Tagging Cheatsheet</title><link>https://www.client9.com/git-tagging-cheatsheet/</link><pubDate>Tue, 01 May 2018 19:41:51 +0000</pubDate><guid>https://www.client9.com/git-tagging-cheatsheet/</guid><description>Git tags are similar to regular code. One add and deletes tags locally. At some point they are pushed to a remote repository. The syntax is mostly similar to what you do with code.
The best references for git tagging are in the git book, specifically 2.6 Git Basics Tagging and 10.3 Git References. The built-in help git tag --help is also useful, especially the section on re-tagging.
When reading these, keep in mind that Git has two types of tags.</description></item><item><title>Automatically Install Git Hooks</title><link>https://www.client9.com/automatically-install-git-hooks/</link><pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/automatically-install-git-hooks/</guid><description>Git has a great system of hooks, where actions are taken:
after a commit is done, to run static analysis or unit tests before the commit message is generated, to provide a commit message template after the commit message is finished, to do final validation on the message Proper use of hooks improves the success rate of pull requests and continuous integration runs. The only problem is they are optional.</description></item><item><title>Copying GitHub Markdown Style</title><link>https://www.client9.com/copying-github-markdown-style/</link><pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/copying-github-markdown-style/</guid><description>For many, the clean look of Github pages, issues and comments defines how markdown should be rendered. Hereâ€™s a few ways of getting the same look in your projects.
sindresorhus/github-markdown-css Sindre Sorhus made a site that covers everything about GitHub-flavored markdown. The CSS to replicate the GitHub style can be found at the matching GitHub repository.
shurcool/github-flavored-markdown Dmitri Shuralyov wrote shurcool/github-flavored-markdown as a extension to the Black Friday markdown processor. It takes markdown and turns it into HTML that should be identical to what GitHub produces.</description></item><item><title>Git Undo Last Commit</title><link>https://www.client9.com/git-undo-last-commit/</link><pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/git-undo-last-commit/</guid><description>If you did not git push, then you have a easy choice on how much you want to undo. If you did push, it&amp;#39;s more work but can be done.
Keep changes, just modify the commit message Undo commit, but keep changes Undo the commit, undo the changes Undo a push, and the commit How do I just change the last commit message? If you didn&amp;#39;t push, and just need to change the last commit message, use the --amend flag.</description></item></channel></rss>