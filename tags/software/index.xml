<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on Nick Galbreath</title><link>https://www.client9.com/tags/software/</link><description>Recent content in Software on Nick Galbreath</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2018 Nick Galbreath</copyright><lastBuildDate>Sat, 24 Mar 2018 06:33:55 +0000</lastBuildDate><atom:link href="https://www.client9.com/tags/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Rules for Programs Writing Programs</title><link>https://www.client9.com/rules-for-programs-writing-programs/</link><pubDate>Sat, 24 Mar 2018 06:33:55 +0000</pubDate><guid>https://www.client9.com/rules-for-programs-writing-programs/</guid><description>I&amp;#39;d rather write programs to write programs than write programs.Programming Pearls, Communications of the ACM, Sept. 1985 I write a lot of programs that write programs. I’ve found a few rules that makes the output and usage of these generated programs more useful.
Make the output “diff friendly” By “diff friendly”, the output from “diff” or “git diff” should be clear to human on what changed, if anything. I wrote a whole article on diff friendly, but the TLDR is:</description></item><item><title>Diff-Friendly Programming</title><link>https://www.client9.com/diff-friendly-programming/</link><pubDate>Sat, 24 Mar 2018 04:40:06 +0000</pubDate><guid>https://www.client9.com/diff-friendly-programming/</guid><description>The day-to-day for most programmers isn’t writing code. It’s editing code. Specifically, editing code you didn’t write. And these edits are not typically pages and pages of fresh code. There are small changes here and there. And in the future, someone else will be editing these edits as well. Programming is a team sport.
These changes are often only evaluated in “diff” form (think GitHub pull request) and not the full context of the file.</description></item><item><title>Never Use Naked If Statements</title><link>https://www.client9.com/never-use-naked-if-statements/</link><pubDate>Fri, 23 Mar 2018 18:32:03 +0000</pubDate><guid>https://www.client9.com/never-use-naked-if-statements/</guid><description>For many programming languages based on the C-syntax style, the body of an if-statement is delimited by braces:
if (foo == 1) { delete_everything(); } However, in Javascript, Java, PHP, C and C++, Java, PHP, “naked” if-statements are allowed. These have a single body statement without using braces.
if (foo == 1) delete_everything(); if (foo == 1) delete_everything(); There are some other variation of naked statements, such are naked for-loops, but this is the most common.</description></item><item><title>Reduce Golang Binary Size by 20 Percent</title><link>https://www.client9.com/reduce-golang-binary-size-by-20-percent/</link><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/reduce-golang-binary-size-by-20-percent/</guid><description>I first read about this on Shrink your go binaries with this one weird trick by Filippo Valsorda. That&amp;#39;s from 2016, but I retested on golang 1.8.1 1.10.0.
Just add -ldflags=&amp;#34;-s -w&amp;#34; to your build and watch the output size drop by 20%.
go build -ldflags=&amp;#34;-s -w&amp;#34; This strips away a bunch of symbols that are only used by debuggers. If you don&amp;#39;t use them, then everything else is the same, including panic stack traces.</description></item><item><title>Golang globs and the Double Star Glob Operator</title><link>https://www.client9.com/golang-globs-and-the-double-star-glob-operator/</link><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/golang-globs-and-the-double-star-glob-operator/</guid><description>The golang filepath/glob and filepath/match functions provide glob matching but does not support the &amp;#34;double star&amp;#34;, &amp;#34;double asterisk&amp;#34;, &amp;#34;globstar&amp;#34;, &amp;#34;super glob&amp;#34;, &amp;#34;super wildcard&amp;#34; operation that descends into other directories. According to Issue 11862 the problem seems to be handling edge cases like crossing file system boundaries, symlinks and infinite loops (if I read @rsc&amp;#39;s comment correctly).
In the meantime, one of these packages might work:
mattn/go-zglob looks very optimized for filewalking bmatcuk/doublestar appears to be the most mature godo/glob.</description></item><item><title>Resilient Software Engineering</title><link>https://www.client9.com/resilient-software-engineering/</link><pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/resilient-software-engineering/</guid><description>As the velocity of application development has increased, so has the velocity (and success) of attackers. Given a massive hiring shortage of security professionals, how can we keep up and even get ahead? We can, if we change the role of security to one that is building systems that are resilient to security shocks. When we do this, we find the topics in security are quite different from what they used to be: How are we managing our software supply chain?</description></item><item><title>BYOD Bring Your Own Dependencies</title><link>https://www.client9.com/byod-bring-your-own-dependencies/</link><pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate><guid>https://www.client9.com/byod-bring-your-own-dependencies/</guid><description>First presented at DevOpsDays Austin, Texas on May 15, 2015.
Most memorable about this talk was a well know audience member decided I was attacking docker and made it clear to the entire convention that he was not happy with me. Afterwards, a number of people came up to me and said “so this is what devops is all about? Does this normally happen? That was really rough.” You can decide if the presentation is unfair to docker.</description></item><item><title>Secure Application Development with Golang</title><link>https://www.client9.com/secure-application-development-with-golang/</link><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>https://www.client9.com/secure-application-development-with-golang/</guid><description>First presented at RSA USA 2015, Session ASD-F02 on April 24, 2015 in San Francisco, California.
This might be the worst slide template I have ever used:
Fonts are too small Fonts are microsoft-specific Font color is grey Background is grey Background has pattern It would seem it’s specifically designed for not-reading. But if you can read it, the deck is still accurate in 2018.</description></item><item><title>PHP Static Analysis 2012</title><link>https://www.client9.com/php-static-analysis-2012/</link><pubDate>Fri, 10 Aug 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/php-static-analysis-2012/</guid><description>Over at the Code as Craft blog by Etsy on how static analysis for PHP was done. Here’s the intro:
At Etsy we have three tiers of static analysis on our PHP code that run on every commit or runs periodically every hour. They form an important part of our continuous deployment pipeline along with one-button deploys, fast unit and functional tests, copious amounts of graphing, and a fantastic development environment to make sure code flows safely and securely to production.</description></item><item><title>Better Random Numbers in PHP using /dev/urandom</title><link>https://www.client9.com/better-random-numbers-in-php-using-dev-urandom/</link><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/better-random-numbers-in-php-using-dev-urandom/</guid><description>First posted in the Code as Craft blog. Here’s the intro:
The design of PHP’s basic random number generators rand and it’s newer variant mt_rand is based off the C Standard Library. For better or worse, both use a single global state and this can be reset using stand (or mt_srand). This means anyone (a developer, a third party module, a library) could set the state to a fixed value and every random number following will be the same for every request.</description></item><item><title>Time Tested PHP: Advanced Testing Techniques with libtimemachine</title><link>https://www.client9.com/time-tested-php-advanced-testing-techniques-with-libtimemachine/</link><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/time-tested-php-advanced-testing-techniques-with-libtimemachine/</guid><description/></item><item><title>Robots, Graphs and Binary Search</title><link>https://www.client9.com/robots-graphs-and-binary-search/</link><pubDate>Thu, 24 May 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/robots-graphs-and-binary-search/</guid><description>Over at the Code as Craft blog by Etsy is a new article on detecting and monitoring robotic traffic and the use of a IP categorization database. Here’s the intro:
We love our human customers. That said we get a lot of traffic from robots too. This is great, especially when they use the Etsy API. However, they sometimes misbehave. And they misbehave frequently in the late hours, not unlike a legendary East Village nightclub.</description></item><item><title>Static Analysis for PHP</title><link>https://www.client9.com/static-analysis-for-php/</link><pubDate>Sat, 19 May 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/static-analysis-for-php/</guid><description>Also checkout the matching Code as Craft article on static analysis for PHP.</description></item><item><title>Rate-Limiting at Scale</title><link>https://www.client9.com/rate-limiting-at-scale/</link><pubDate>Tue, 01 May 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/rate-limiting-at-scale/</guid><description>Rate Limiting in Action Nick Galbreath, Director of Engineering, Etsy. Rate limiting is a useful technique to limit malicious and undesirable behavior on web services. This talk will present a simple rate limit implementation using memcached that allows one to easily add rate limiting anywhere in their application. We’ll then cover some (surprising) real-world uses of rate limits, how to distinguish between enthusiasm and maliciousness, and finally some of the common countermeasures that are used.</description></item><item><title>Google Safe Browsing without the Browser</title><link>https://www.client9.com/google-safe-browsing-without-the-browser/</link><pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/google-safe-browsing-without-the-browser/</guid><description>Over at Etsy&amp;#39;s Code as Craft blog is a new article on using the Google Safe Browsing API to analyze user generated content for malware links on the server. Here’s the intro to the story:
At Etsy, we are constantly evaluating the security and safety of our members as they use the site. One way we do this is by analyzing user generated content (UGC) for possible problems. As part of the process we integrate results from the Google Safe Browsing (GSB) service.</description></item></channel></rss>