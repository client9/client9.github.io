<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on Nick Galbreath</title><link>https://www.client9.com/tags/devops/</link><description>Recent content in Devops on Nick Galbreath</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2018 Nick Galbreath</copyright><lastBuildDate>Wed, 25 Apr 2018 03:55:59 +0000</lastBuildDate><atom:link href="https://www.client9.com/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Using curl in Automation</title><link>https://www.client9.com/using-curl-in-automation/</link><pubDate>Wed, 25 Apr 2018 03:55:59 +0000</pubDate><guid>https://www.client9.com/using-curl-in-automation/</guid><description>Often times, in provisioning systems, batch scripts, and CI/CD pipelines, some call to fetch an external (network) resource is required. While it’s best to eliminate as many external dependencies and network calls as possible, sometimes it can’t be helped. In which case the omnipresent curl is useful. However, by default, curl isn’t well optimized for automation. In particular:
shows a progress meter designed for humans. In CI/CD logs, progress meters add no value and make horrible log output.</description></item><item><title>Diff-Friendly Programming</title><link>https://www.client9.com/diff-friendly-programming/</link><pubDate>Sat, 24 Mar 2018 04:40:06 +0000</pubDate><guid>https://www.client9.com/diff-friendly-programming/</guid><description>The day-to-day for most programmers isn’t writing code. It’s editing code. Specifically, editing code you didn’t write. And these edits are not typically pages and pages of fresh code. There are small changes here and there. And in the future, someone else will be editing these edits as well. Programming is a team sport.
These changes are often only evaluated in “diff” form (think GitHub pull request) and not the full context of the file.</description></item><item><title>Never Use Naked If Statements</title><link>https://www.client9.com/never-use-naked-if-statements/</link><pubDate>Fri, 23 Mar 2018 18:32:03 +0000</pubDate><guid>https://www.client9.com/never-use-naked-if-statements/</guid><description>For many programming languages based on the C-syntax style, the body of an if-statement is delimited by braces:
if (foo == 1) { delete_everything(); } However, in Javascript, Java, PHP, C and C++, Java, PHP, “naked” if-statements are allowed. These have a single body statement without using braces.
if (foo == 1) delete_everything(); if (foo == 1) delete_everything(); There are some other variation of naked statements, such are naked for-loops, but this is the most common.</description></item><item><title>Positive Outcomes from Zero Days</title><link>https://www.client9.com/positive-outcomes-from-zero-days/</link><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/positive-outcomes-from-zero-days/</guid><description>In March 2017 the RAND Corporation released a report “Zero Days, Thousands of Nights: The Life and Times of Zero-Day Vulnerabilities and Their Exploits”. The goal was to assess the public policy of governments stockpiling or releasing so-called 0-day exploits. While that remains an open question, the report and underlying data set of real-world exploits provides valuable insights into software engineering for security and resilience. This talk will provide an overview of the report and what it means for builders and defenders.</description></item><item><title>Resilient Software Engineering</title><link>https://www.client9.com/resilient-software-engineering/</link><pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/resilient-software-engineering/</guid><description>As the velocity of application development has increased, so has the velocity (and success) of attackers. Given a massive hiring shortage of security professionals, how can we keep up and even get ahead? We can, if we change the role of security to one that is building systems that are resilient to security shocks. When we do this, we find the topics in security are quite different from what they used to be: How are we managing our software supply chain?</description></item><item><title>BYOD Bring Your Own Dependencies</title><link>https://www.client9.com/byod-bring-your-own-dependencies/</link><pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate><guid>https://www.client9.com/byod-bring-your-own-dependencies/</guid><description>First presented at DevOpsDays Austin, Texas on May 15, 2015.
Most memorable about this talk was a well know audience member decided I was attacking docker and made it clear to the entire convention that he was not happy with me. Afterwards, a number of people came up to me and said “so this is what devops is all about? Does this normally happen? That was really rough.” You can decide if the presentation is unfair to docker.</description></item><item><title>Making Operations Visible</title><link>https://www.client9.com/making-operations-visible/</link><pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/making-operations-visible/</guid><description> Video More DevOpsDays Tokyo Coverage Not necessarily related to this presentation.
Video Media posts https://itpro.nikkeibp.co.jp/article/NEWS/20130930/507682/ https://itpro.nikkeibp.co.jp/article/NEWS/20130930/507755/ https://itpro.nikkeibp.co.jp/article/NEWS/20131001/507959/ https://www.publickey1.jp/blog/13/devopsdevops_day_tokyo_2013.html https://www.publickey1.jp/blog/13/devopsdevops_day_tokyo_2013_1.html https://www.publickey1.jp/blog/13/githubdevopsboxenhubotdevops_day_tokyo_2013.html https://www.publickey1.jp/blog/13/githubboxenhubotdevops_day_tokyo_2013.html https://www.publickey1.jp/blog/13/devopsdevops_day_tokyo_2013_2.html Attendee posts https://mass.hatenablog.com/entry/2013/09/28/205309 https://d.hatena.ne.jp/n-sega/20130928/1380373634 https://kazuph.hateblo.jp/entry/2013/09/28/152302 https://jedipunkz.github.io/blog/2013/09/29/devops-day-tokyo-2013-report/ https://toshi-miura.hatenablog.com/entry/2013/09/29/222609 https://codezine.jp/article/detail/7438</description></item><item><title>Faster Secure Software Development with Continuous Deployment</title><link>https://www.client9.com/faster-secure-software-development-with-continuous-deployment/</link><pubDate>Fri, 24 May 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/faster-secure-software-development-with-continuous-deployment/</guid><description>First presented at PHDays on May 24, 2013 in Moscow, Russia.
Why don&amp;#39;t developers care about security issues? Why isn&amp;#39;t security training effective? Why do basic application security problems continue to exist? One reason is that long release cycles disenfranchise developers from caring or even knowing about security or operational issues. Continuous Deployment helps address this by small, but frequent, changes to the production environment. At first, this would seem less stable and less secure, however continuous deployment is a lot more than &amp;#34;pushing code&amp;#34;.</description></item><item><title>Fixing Security by Fixing Development using Continuous Deployment</title><link>https://www.client9.com/fixing-security-by-fixing-development-using-continuous-deployment/</link><pubDate>Tue, 14 May 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/fixing-security-by-fixing-development-using-continuous-deployment/</guid><description>First presented at Security Development Conference on May 14, 2013 in San Francisco, USA.
Do you have an effective release cycle? Is your process long and archaic? Long release cycle are typically based on assumptions we haven&amp;#39;t seen since the 1980s and require very mature organizations to implement successfully. They can also disenfranchise developers from caring or even knowing about security or operational issues. Attend this session to learn more about an alternative approach to managing deployments through Continuous Deployment, otherwise known as Continuous Delivery.</description></item><item><title>Care and Feeding of Large Scale Graphite Installations</title><link>https://www.client9.com/care-and-feeding-of-large-scale-graphite-installations/</link><pubDate>Wed, 01 May 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/care-and-feeding-of-large-scale-graphite-installations/</guid><description>First presented at DevOpsDays on May 1, 2013 in Austin, Texas.</description></item><item><title>Continuous Deployment, The New Number One Security Feature</title><link>https://www.client9.com/continuous-deployment-the-new-number-one-security-feature/</link><pubDate>Thu, 16 Aug 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/continuous-deployment-the-new-number-one-security-feature/</guid><description>First presented at Security BSides Los Angeles on August 16, 2012 in Hermosa Beach, California.</description></item><item><title>SANS AppSec Blog on Continuous Deployment and Security</title><link>https://www.client9.com/sans-appsec-blog-on-continuous-deployment-and-security/</link><pubDate>Mon, 04 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/sans-appsec-blog-on-continuous-deployment-and-security/</guid><description>Frank Kim asked me some tough questions on continuous deployment and what it means for security:
In Continuous Deployment, developers push software to production several times a day. Please explain how this reduces risk in development and operations. Many Appsec professionals are concerned that Agile development teams build software too fast to be secure. Continuous Deployment seems to accelerate this even more. How do security controls and checks fit into Continuous Deployment, and what controls and checks need to be done differently to keep up with the pace?</description></item><item><title>Rate-Limiting at Scale</title><link>https://www.client9.com/rate-limiting-at-scale/</link><pubDate>Tue, 01 May 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/rate-limiting-at-scale/</guid><description>Rate Limiting in Action Nick Galbreath, Director of Engineering, Etsy. Rate limiting is a useful technique to limit malicious and undesirable behavior on web services. This talk will present a simple rate limit implementation using memcached that allows one to easily add rate limiting anywhere in their application. We’ll then cover some (surprising) real-world uses of rate limits, how to distinguish between enthusiasm and maliciousness, and finally some of the common countermeasures that are used.</description></item><item><title>What You Can Learn From Small Companies about AppSec</title><link>https://www.client9.com/what-you-can-learn-from-small-companies-about-appsec/</link><pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/what-you-can-learn-from-small-companies-about-appsec/</guid><description>This was presented at SANS AppSec Summit, Las Vegas on April 30 2012. None of the presenters are really from “small companies,” but still useful seeing how different companies solve security problems.
4:05-5:00 p.m.What You Can Learn From Small Companies About AppSecModerator: SANS InstitutePanelists:Jim Bird, CTO, BIDS Trading TechnologiesNick Galbreath, Director of Engineering, EtsyCameron Morris, Software Security Specialist , PartNetApplication security is a big challenge for small organizations, too. The security problems are just as numerous, but the resources are fewer.</description></item><item><title>DevOpsSec Applying DevOps Principles to Security</title><link>https://www.client9.com/devopssec-applying-devops-principles-to-security/</link><pubDate>Tue, 03 Apr 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/devopssec-applying-devops-principles-to-security/</guid><description/></item><item><title>Fraud Engineering: Implementing a Cross-Functional Risk Strategy</title><link>https://www.client9.com/fraud-engineering-implementing-a-cross-functional-risk-strategy/</link><pubDate>Thu, 29 Mar 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/fraud-engineering-implementing-a-cross-functional-risk-strategy/</guid><description/></item></channel></rss>