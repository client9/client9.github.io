<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on Nick Galbreath</title><link>https://www.client9.com/tags/hugo/</link><description>Recent content in Hugo on Nick Galbreath</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2018 Nick Galbreath</copyright><lastBuildDate>Tue, 01 May 2018 00:29:00 +0000</lastBuildDate><atom:link href="https://www.client9.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use Data URLs for Image Icons with Hugo</title><link>https://www.client9.com/how-to-use-data-urls-for-image-icons-with-hugo/</link><pubDate>Tue, 01 May 2018 00:29:00 +0000</pubDate><guid>https://www.client9.com/how-to-use-data-urls-for-image-icons-with-hugo/</guid><description>Many times a site needs an image icon. They are commonly used once per page, in the header or footer, are small -- under 128x128 pixels and a few kilobytes. Using a network call, either back to the site, or another site (often a social media site) has a number of problems:
loading requires a network round trip which is slow and possibly render blocking can cause the image to flash-in later, which is annoying requires fooling around with cache header settings, and debatable how much caching helps in this case Instead of a network call consider embedding the image into the page itself using a data url.</description></item><item><title>Using Font Awesome Icons in Hugo</title><link>https://www.client9.com/using-font-awesome-icons-in-hugo/</link><pubDate>Fri, 13 Apr 2018 05:23:08 +0000</pubDate><guid>https://www.client9.com/using-font-awesome-icons-in-hugo/</guid><description>Icons are now essential for websites. According to Font Awesome, it’s icons are used in 100M websites. Traditional methods for using icons can involve loading a web font, a sprite, or script. That’s a lot of work if you need a single icon or two in the nav. With Hugo we can preload the SVG icons, and inject them into our page with partial template or shortcode, skipping the network. The example will use Font Awesome, but the technique will work many other icon systems.</description></item><item><title>Designing HTML for Safari Reader Mode</title><link>https://www.client9.com/designing-html-for-safari-reader-mode/</link><pubDate>Tue, 10 Apr 2018 17:14:56 +0000</pubDate><guid>https://www.client9.com/designing-html-for-safari-reader-mode/</guid><description>For whatever reason, Apple doesn’t provide any guidance on how to design for Safari Reader Mode . Maybe they want the right to change it at any time or maybe it’s to prevent abuse and advertising sneaking in. Likewise, it’s near impossible to find any third-party guidance on how to structure your HTML. It’s mostly guessing, checking reader mode, editing HTML, reloading until it works. But after looking at the Reader javascript source code, and a lot of View Source on numerous publications, I’ve come up with some rules on how to structure HTML to optimize for Reader.</description></item><item><title>Convert strftime Time Format to Hugo</title><link>https://www.client9.com/convert-strftime-time-format-to-hugo/</link><pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/convert-strftime-time-format-to-hugo/</guid><description>Many blogging platforms, such as Wordpress and Jekyll, use some variation of strptime to format date and time values. Hugo does time formatting in a completely different way and is based on the time package from Go. It uses the concept of a magic date as represented by:
Mon Jan 2 15:04:05 MST 2006 Why that? When you convert it to all numericals you get the following:
01/02 03:04:05PM &amp;#39;06 -0700 Notice how it’s 1, 2, 3, 4, 5, 6, 7 for month, day, hour, minute, second, year, and time zone offset.</description></item></channel></rss>