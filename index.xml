<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nick Galbreath</title><link>https://www.client9.com/</link><description>Recent content on Nick Galbreath</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2018 Nick Galbreath</copyright><lastBuildDate>Mon, 21 May 2018 05:17:20 +0000</lastBuildDate><atom:link href="https://www.client9.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging Packages in Golang</title><link>https://www.client9.com/logging-packages-in-golang/</link><pubDate>Mon, 21 May 2018 05:17:20 +0000</pubDate><guid>https://www.client9.com/logging-packages-in-golang/</guid><description>Out of the 35 packages in Awesome Go, a majority are obsolete, duplicative or fail to address what problem they are trying to solve. Of the remaining (and some not on the list), they fall into four categories.
Basics General purpose Performance focused Composable The Basics The basics are just that - there do the job and are common or installed by default. However none of these support context logging or structured logging.</description></item><item><title>Structured Logging in Golang</title><link>https://www.client9.com/structured-logging-in-golang/</link><pubDate>Sun, 13 May 2018 17:54:22 +0000</pubDate><guid>https://www.client9.com/structured-logging-in-golang/</guid><description>Out of the box, golang provides the stdlib/log package. It provides “printf” style logging. A template string is used along with a list of arguments, and a log message is generated:
log.Printf(&amp;#34;user %d wasn&amp;#39;t found&amp;#34;, 1234) // user 1234 wasn&amp;#39;t found This dynamically generated message is easy and convenient but has a number of issues involving storage, searching, and consistency.
Structured logging solves these problems by replacing the printf message template with named-fields.</description></item><item><title>Git Tagging Cheatsheet</title><link>https://www.client9.com/git-tagging-cheatsheet/</link><pubDate>Tue, 01 May 2018 19:41:51 +0000</pubDate><guid>https://www.client9.com/git-tagging-cheatsheet/</guid><description>Git tags are similar to regular code. One add and deletes tags locally. At some point they are pushed to a remote repository. The syntax is mostly similar to what you do with code.
The best references for git tagging are in the git book, specifically 2.6 Git Basics Tagging and 10.3 Git References. The built-in help git tag --help is also useful, especially the section on re-tagging.
When reading these, keep in mind that Git has two types of tags.</description></item><item><title>How to use Data URLs for Image Icons with Hugo</title><link>https://www.client9.com/how-to-use-data-urls-for-image-icons-with-hugo/</link><pubDate>Tue, 01 May 2018 00:29:00 +0000</pubDate><guid>https://www.client9.com/how-to-use-data-urls-for-image-icons-with-hugo/</guid><description>Many times a site needs an image icon. They are commonly used once per page, in the header or footer, are small -- under 128x128 pixels and a few kilobytes. Using a network call, either back to the site, or another site (often a social media site) has a number of problems:
loading requires a network round trip which is slow and possibly render blocking can cause the image to flash-in later, which is annoying requires fooling around with cache header settings, and debatable how much caching helps in this case Instead of a network call consider embedding the image into the page itself using a data url.</description></item><item><title>Using curl in Automation</title><link>https://www.client9.com/using-curl-in-automation/</link><pubDate>Wed, 25 Apr 2018 03:55:59 +0000</pubDate><guid>https://www.client9.com/using-curl-in-automation/</guid><description>Often times, in provisioning systems, batch scripts, and CI/CD pipelines, some call to fetch an external (network) resource is required. While it’s best to eliminate as many external dependencies and network calls as possible, sometimes it can’t be helped. In which case the omnipresent curl is useful. However, by default, curl isn’t well optimized for automation. In particular:
shows a progress meter designed for humans. In CI/CD logs, progress meters add no value and make horrible log output.</description></item><item><title>Using Font Awesome Icons in Hugo</title><link>https://www.client9.com/using-font-awesome-icons-in-hugo/</link><pubDate>Fri, 13 Apr 2018 05:23:08 +0000</pubDate><guid>https://www.client9.com/using-font-awesome-icons-in-hugo/</guid><description>Icons are now essential for websites. According to Font Awesome, it’s icons are used in 100M websites. Traditional methods for using icons can involve loading a web font, a sprite, or script. That’s a lot of work if you need a single icon or two in the nav. With Hugo we can preload the SVG icons, and inject them into our page with partial template or shortcode, skipping the network. The example will use Font Awesome, but the technique will work many other icon systems.</description></item><item><title>Designing HTML for Safari Reader Mode</title><link>https://www.client9.com/designing-html-for-safari-reader-mode/</link><pubDate>Tue, 10 Apr 2018 17:14:56 +0000</pubDate><guid>https://www.client9.com/designing-html-for-safari-reader-mode/</guid><description>For whatever reason, Apple doesn’t provide any guidance on how to design for Safari Reader Mode . Maybe they want the right to change it at any time or maybe it’s to prevent abuse and advertising sneaking in. Likewise, it’s near impossible to find any third-party guidance on how to structure your HTML. It’s mostly guessing, checking reader mode, editing HTML, reloading until it works. But after looking at the Reader javascript source code, and a lot of View Source on numerous publications, I’ve come up with some rules on how to structure HTML to optimize for Reader.</description></item><item><title>CSS Color Dingbats</title><link>https://www.client9.com/css-color-dingbats/</link><pubDate>Fri, 06 Apr 2018 05:52:50 +0000</pubDate><guid>https://www.client9.com/css-color-dingbats/</guid><description>Before emoji, there were dingbats. In the CSS Color Emoji, you may see some of the glyphs render in black-and-white. These are the old dingbats and sometimes font stacks render them before the color emoji fonts are used. This is especially true for macOS and linux. For iOS and Windows, rendering seems to default to color and everything works correctly. It can vary depending on your font stack, the browser, and the OS and it’s only a few characters that are affected.</description></item><item><title>CSS Color Emoji Stack</title><link>https://www.client9.com/css-color-emoji-stack/</link><pubDate>Wed, 04 Apr 2018 07:20:37 +0000</pubDate><guid>https://www.client9.com/css-color-emoji-stack/</guid><description>As part of a solid cross-platform system stack is emoji rendering. As mentioned in CSS System Fonts for Linux 2018, Ubuntu 18.04 and Fedora 28 gain color emoji support. While most platforms now render emoji by default, the results are often inconsistent. Most emoji will be in color, but perhaps not the system emoji, and some emoji by default will render in monochrome versions. To help resolve these issues, color emoji fonts must be explicitly added to make them render correctly.</description></item><item><title>CSS System Fonts on Linux 2018</title><link>https://www.client9.com/css-system-fonts-on-linux-2018/</link><pubDate>Thu, 29 Mar 2018 19:40:48 +0000</pubDate><guid>https://www.client9.com/css-system-fonts-on-linux-2018/</guid><description>I’ve been working on CSS native font stacks as way of delivering the best reading experience in the shortest amount of page-load time. Apple and Windows are mostly straightforward. But what about Linux? To find out, I fired up the default desktop versions of:
Fedora 28 (pre-release) Ubuntu 18.04 (pre-release) Mint Linux 18.3 Elementary.io (early 2018) and the ran the following and analyzed the results.
fc-list -f &amp;#39;%{family[0]}\n&amp;#39; | sort -u What’s Installed These generic fonts were installed on all systems:</description></item><item><title>CSS Georgia Font Stack with Tabular Numbers</title><link>https://www.client9.com/css-georgia-font-stack-with-tabular-numbers/</link><pubDate>Thu, 29 Mar 2018 19:32:29 +0000</pubDate><guid>https://www.client9.com/css-georgia-font-stack-with-tabular-numbers/</guid><description>Georgia is used as both a primary and fallback typeface in many CSS stacks, as it is available on nearly all macOS and Windows machines. However, by default Georgia uses “old style, proportional numbers” or “text figures.” That is, the numbers have different widths so they don’t align well in tables, and different vertical size and alignment. Many (most?) other typefaces use “tabular, lining numbers” with similar horizontal size and vertical alignment.</description></item><item><title>Rules for Programs Writing Programs</title><link>https://www.client9.com/rules-for-programs-writing-programs/</link><pubDate>Sat, 24 Mar 2018 06:33:55 +0000</pubDate><guid>https://www.client9.com/rules-for-programs-writing-programs/</guid><description>I&amp;#39;d rather write programs to write programs than write programs.Programming Pearls, Communications of the ACM, Sept. 1985 I write a lot of programs that write programs. I’ve found a few rules that makes the output and usage of these generated programs more useful.
Make the output “diff friendly” By “diff friendly”, the output from “diff” or “git diff” should be clear to human on what changed, if anything. I wrote a whole article on diff friendly, but the TLDR is:</description></item><item><title>Diff-Friendly Programming</title><link>https://www.client9.com/diff-friendly-programming/</link><pubDate>Sat, 24 Mar 2018 04:40:06 +0000</pubDate><guid>https://www.client9.com/diff-friendly-programming/</guid><description>The day-to-day for most programmers isn’t writing code. It’s editing code. Specifically, editing code you didn’t write. And these edits are not typically pages and pages of fresh code. There are small changes here and there. And in the future, someone else will be editing these edits as well. Programming is a team sport.
These changes are often only evaluated in “diff” form (think GitHub pull request) and not the full context of the file.</description></item><item><title>Never Use Naked If Statements</title><link>https://www.client9.com/never-use-naked-if-statements/</link><pubDate>Fri, 23 Mar 2018 18:32:03 +0000</pubDate><guid>https://www.client9.com/never-use-naked-if-statements/</guid><description>For many programming languages based on the C-syntax style, the body of an if-statement is delimited by braces:
if (foo == 1) { delete_everything(); } However, in Javascript, Java, PHP, C and C++, Java, PHP, “naked” if-statements are allowed. These have a single body statement without using braces.
if (foo == 1) delete_everything(); if (foo == 1) delete_everything(); There are some other variation of naked statements, such are naked for-loops, but this is the most common.</description></item><item><title>Styling Computer Source Code</title><link>https://www.client9.com/styling-computer-source-code/</link><pubDate>Sat, 17 Mar 2018 16:24:26 +0000</pubDate><guid>https://www.client9.com/styling-computer-source-code/</guid><description>Format your code No matter how nicely you style the code, it won&amp;#39;t matter if the code looks sloppy. Make sure it uses a consistent indentation style and is flush-left.
Make sure your &amp;#34;smart punctuation&amp;#34; is smart Many blog engines rewrite content to improve typography: smart quotes, changing dash to a Unicode minus-sign, etc. This looks great in normal prose, but make sure it&amp;#39;s not doing this to code blocks. If someone cut and pastes your code, it won&amp;#39;t work.</description></item><item><title>CSS System Font Stack Monospace v2</title><link>https://www.client9.com/css-system-font-stack-monospace-v2/</link><pubDate>Sat, 24 Feb 2018 21:50:56 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-monospace-v2/</guid><description>What is this? For most systems the default monospace font is something horrible like Courier. This can easily improved by using an installed system font, that also avoids the overhead and hacks of using a web-font.
This an update to the original Monospace V1 article.
What’s Changed? Since that first article, GitHub.com has been using a monospace system font stack for at least six months. Given the their focus on computer code and that GitHub is the 64th largest site on the Internet means they should know what a good monospace stack is.</description></item><item><title>CSS System Font Stack Sans Serif v3</title><link>https://www.client9.com/css-system-font-stack-sans-serif-v3/</link><pubDate>Sat, 24 Feb 2018 21:09:07 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-sans-serif-v3/</guid><description>What is this? This attempts to create a CSS Font Stack that matches what the client’s OS uses for text. The benefits are for both performance and design. Performance is improved since no web-font needs to be loaded or and there is no need for various hacks to prevent text flashing. Design is improved (or at least acceptable) since the font matches what is already being used across the computer, and the latest system fonts are very good compared to the sans-serif defaults.</description></item><item><title>CSS System Font Stack Sans Serif v2</title><link>https://www.client9.com/css-system-font-stack-sans-serif-v2/</link><pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-sans-serif-v2/</guid><description>This is an update to the original native font stack article. It attempts to use the sans serif font used by operating system for user interfaces. This is best for buttons and other UI elements on the page, but it also works for body text.
What&amp;#39;s Changed? The W3C CSS Fonts 4 draft now includes a built-in font system-ui. It should render using the native sans-serif font. It&amp;#39;s implemented in:</description></item><item><title>Debian: find packages without reverse dependencies</title><link>https://www.client9.com/debian-find-packages-without-reverse-dependencies/</link><pubDate>Mon, 23 Oct 2017 00:51:25 +0000</pubDate><guid>https://www.client9.com/debian-find-packages-without-reverse-dependencies/</guid><description>When trying to make minimal OS, one wants to get rid of as many non-critical packages as possible. Under Debian, apt-cache rdepends --installed on a given package shows the reverse dependencies, or a list of other packages that depends on it.
The bash script below scans all installed packages and emits a list of packages without any reverse dependencies.
Packages without any reverse dependencies could be one of three things:</description></item><item><title>Positive Outcomes from Zero Days</title><link>https://www.client9.com/positive-outcomes-from-zero-days/</link><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/positive-outcomes-from-zero-days/</guid><description>In March 2017 the RAND Corporation released a report “Zero Days, Thousands of Nights: The Life and Times of Zero-Day Vulnerabilities and Their Exploits”. The goal was to assess the public policy of governments stockpiling or releasing so-called 0-day exploits. While that remains an open question, the report and underlying data set of real-world exploits provides valuable insights into software engineering for security and resilience. This talk will provide an overview of the report and what it means for builders and defenders.</description></item><item><title>Self-Documenting Makefiles</title><link>https://www.client9.com/self-documenting-makefiles/</link><pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/self-documenting-makefiles/</guid><description>Makefiles are making a come-back due to wide use in the golang community. The only problem is... what do they do? Reading a makefile can be hard -- it&amp;#39;s often ugly and many of targets are for internal use only. And unlike a good CLI program, there is no equivalent of --help.
Wouldn&amp;#39;t it be great if you could mark-up the makefile and have make help automatically produce a usage description?</description></item><item><title>Convert strftime Time Format to Hugo</title><link>https://www.client9.com/convert-strftime-time-format-to-hugo/</link><pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/convert-strftime-time-format-to-hugo/</guid><description>Many blogging platforms, such as Wordpress and Jekyll, use some variation of strptime to format date and time values. Hugo does time formatting in a completely different way and is based on the time package from Go. It uses the concept of a magic date as represented by:
Mon Jan 2 15:04:05 MST 2006 Why that? When you convert it to all numericals you get the following:
01/02 03:04:05PM &amp;#39;06 -0700 Notice how it’s 1, 2, 3, 4, 5, 6, 7 for month, day, hour, minute, second, year, and time zone offset.</description></item><item><title>Static Analysis for Bash and Shell Scripts</title><link>https://www.client9.com/static-analysis-for-bash-and-shell-scripts/</link><pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/static-analysis-for-bash-and-shell-scripts/</guid><description>If you must write shellcode, use the same techniques you use for your primary programming language and use:
static analysis a standard style guide or format a standard library In fact, given how weird shellcode is, it probably needs these tools even more than your regular languages. Fortunately these tools now exist for shell.
shellcheck shellcheck provides static analysis of shell scripts and covers an number of different dialects of shell.</description></item><item><title>Automatically Install Git Hooks</title><link>https://www.client9.com/automatically-install-git-hooks/</link><pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/automatically-install-git-hooks/</guid><description>Git has a great system of hooks, where actions are taken:
after a commit is done, to run static analysis or unit tests before the commit message is generated, to provide a commit message template after the commit message is finished, to do final validation on the message Proper use of hooks improves the success rate of pull requests and continuous integration runs. The only problem is they are optional.</description></item><item><title>Parallelize Shell or Bash Scripts Using Xargs</title><link>https://www.client9.com/parallelize-shell-or-bash-scripts-using-xargs/</link><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/parallelize-shell-or-bash-scripts-using-xargs/</guid><description>Who doesn&amp;#39;t want to go faster? It is common to have a setup script that downloads various packages or tools. Here&amp;#39;s an example:
#!/bin/sh -ex # hugo https://gohugo.io go get github.com/gohugoio/hugo # https://github.com/client9/misspell ./godownloader-misspell 0.3.4 # shellcheck.net docker pull koalaman/shellcheck It runs one line after another in serial. That&amp;#39;s slow.
But notice how each line doesn&amp;#39;t depend on any other (and comment and blank lines don&amp;#39;t matter). If you can write a script in such a way, then you really speed things up by running in parallel using xargs:</description></item><item><title>Reduce Golang Binary Size by 20 Percent</title><link>https://www.client9.com/reduce-golang-binary-size-by-20-percent/</link><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/reduce-golang-binary-size-by-20-percent/</guid><description>I first read about this on Shrink your go binaries with this one weird trick by Filippo Valsorda. That&amp;#39;s from 2016, but I retested on golang 1.8.1 1.10.0.
Just add -ldflags=&amp;#34;-s -w&amp;#34; to your build and watch the output size drop by 20%.
go build -ldflags=&amp;#34;-s -w&amp;#34; This strips away a bunch of symbols that are only used by debuggers. If you don&amp;#39;t use them, then everything else is the same, including panic stack traces.</description></item><item><title>Golang globs and the Double Star Glob Operator</title><link>https://www.client9.com/golang-globs-and-the-double-star-glob-operator/</link><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/golang-globs-and-the-double-star-glob-operator/</guid><description>The golang filepath/glob and filepath/match functions provide glob matching but does not support the &amp;#34;double star&amp;#34;, &amp;#34;double asterisk&amp;#34;, &amp;#34;globstar&amp;#34;, &amp;#34;super glob&amp;#34;, &amp;#34;super wildcard&amp;#34; operation that descends into other directories. According to Issue 11862 the problem seems to be handling edge cases like crossing file system boundaries, symlinks and infinite loops (if I read @rsc&amp;#39;s comment correctly).
In the meantime, one of these packages might work:
mattn/go-zglob looks very optimized for filewalking bmatcuk/doublestar appears to be the most mature godo/glob.</description></item><item><title>Copying GitHub Markdown Style</title><link>https://www.client9.com/copying-github-markdown-style/</link><pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/copying-github-markdown-style/</guid><description>For many, the clean look of Github pages, issues and comments defines how markdown should be rendered. Here’s a few ways of getting the same look in your projects.
sindresorhus/github-markdown-css Sindre Sorhus made a site that covers everything about GitHub-flavored markdown. The CSS to replicate the GitHub style can be found at the matching GitHub repository.
shurcool/github-flavored-markdown Dmitri Shuralyov wrote shurcool/github-flavored-markdown as a extension to the Black Friday markdown processor. It takes markdown and turns it into HTML that should be identical to what GitHub produces.</description></item><item><title>Git Undo Last Commit</title><link>https://www.client9.com/git-undo-last-commit/</link><pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/git-undo-last-commit/</guid><description>If you did not git push, then you have a easy choice on how much you want to undo. If you did push, it&amp;#39;s more work but can be done.
Keep changes, just modify the commit message Undo commit, but keep changes Undo the commit, undo the changes Undo a push, and the commit How do I just change the last commit message? If you didn&amp;#39;t push, and just need to change the last commit message, use the --amend flag.</description></item><item><title>Using macOS Homebrew to Install a Specific Version</title><link>https://www.client9.com/using-macos-homebrew-to-install-a-specific-version/</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/using-macos-homebrew-to-install-a-specific-version/</guid><description>Here&amp;#39;s how to install a specific version of a package on macOS using homebrew. While the process isn&amp;#39;t automatic, it&amp;#39;s also not hard and provides stability.
Why Isn&amp;#39;t This Functionality Built-In? Homebrew used to provide this functionality. If you do search you&amp;#39;ll probably find one these methods that no longer works. My guess is the team behind Homebrew removed the functionality since it never worked very well, at scale.
In most Linux distributions, formulas are in separate repositories and can change multiple times before being released with a manual process.</description></item><item><title>Uninstall Xcode on macOS Sierra</title><link>https://www.client9.com/uninstall-xcode-on-macos-sierra/</link><pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/uninstall-xcode-on-macos-sierra/</guid><description>While title says this is for macOS Sierra, this should work for any version. And we assume that you are familiar with basic Mac functionality and using Terminal or the command line. Let&amp;#39;s get cleaning!
Delete legacy Xcode installs If you started with an old version of Xcode, this may need to be done first. If you get a &amp;#34;not found&amp;#34; error, don&amp;#39;t worry and skip to the next step.</description></item><item><title>CSS System Font Stack Monospace v1</title><link>https://www.client9.com/css-system-font-stack-monospace-v1/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-monospace-v1/</guid><description>Right now, most browsers use something like Courier for their default monospace font. This isn&amp;#39;t very useful and not acceptable for code or programming samples.
Fortunately, it’s not hard to create a CSS-based system font stack with great monospace fonts. This expands on the work in System Shock Mono that originally described making a monospace CSS system font stack.
CSS Below is a high-quality, monospace stack, that works on most modern (last eight years) systems.</description></item><item><title>CSS System Font Stack Sans Serif v1</title><link>https://www.client9.com/css-system-font-stack-sans-serif-v1/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-sans-serif-v1/</guid><description>This is best for buttons and other UI elements on the page, but it also works for body text.
The CSS /* 1: Safari/Mac special, BlinkMac is the current * Chrome method for using the macOS system font * 2: Recent windows * 3: Older Macs, * 4: system default, */ font-family: /* 1 */ -apple-system, BlinkMacSystemFont, /* 2 */ &amp;#34;Segoe UI&amp;#34;, /* 3 */ Helvetica Neue, /* 4 */ sans-serif; This is what it looks like on your browser:</description></item><item><title>CSS System Font Stack Serif Charter v1</title><link>https://www.client9.com/css-system-font-stack-serif-charter-v1/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-serif-charter-v1/</guid><description>It was originally designed in 1987 for print. In 1987 that meant 300 dpi laser printers. That&amp;#39;s very close to what we call retina or HiDPI for screens today. They are not exactly the same but Charter holds up well on today&amp;#39;s screens.
MacOS and iOS now make Charter available as a system font, so it&amp;#39;s great choice. It&amp;#39;s also a free font, and so likely installed on many linux and Windows systems as well.</description></item><item><title>CSS System Font Stack Serif Large v1</title><link>https://www.client9.com/css-system-font-stack-serif-large-v1/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-serif-large-v1/</guid><description>The large serif font stack uses a number of more-styled serif system fonts that also have a larger size. While this can be used as body text, they might be best at larger sizes for headlines.
All fonts in this stack use old style, proportional numbers making them inappropriate for numeric tables.
CSS font-family: /* 1 */ &amp;#34;Hoefler Text&amp;#34;, /* 2 */ Constantia, /* 3 */ Georgia, /* 4 */ serif; This is what it looks like on your browser:</description></item><item><title>CSS System Font Stack Serif Medium v1</title><link>https://www.client9.com/css-system-font-stack-serif-medium-v1/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-serif-medium-v1/</guid><description>This system font stack is of a medium size, and suitable for body text and larger headlines. The primary fonts are based on variations of Palatino that are similar in size and use similar numeric forms.
Mac users get a nice upgrade from Palatino using Iowan Old Style. For Windows users there is no obvious alternate.
For linux and other systems, I let it fall to the default `serif` as it&amp;#39;s unclear what the right thing to is.</description></item><item><title>CSS System Font Stack Serif Small v1</title><link>https://www.client9.com/css-system-font-stack-serif-small-v1/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.client9.com/css-system-font-stack-serif-small-v1/</guid><description>This system stack is upgrade of the traditional serif font Times New Roman. The Mac and Windows alternates are dense and screen optimized.
The CSS font-family: /* 1 */ Athelas, /* 2 */ Cambria, /* 3 */ serif; This is what it looks like on your browser:
THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.
The quick brown fox jumped over the lazy dog.
0123456789
11111.11
88888.88
0Oo il1I! Z2z 8$s5S😺&amp;#x203c;&amp;#x270f;&amp;#x26a0;&amp;#x1F62D;&amp;#x2934;&amp;#x2935; The Fonts If font below is not available on your system, it will be rendered in a monospace font.</description></item><item><title>Resilient Software Engineering</title><link>https://www.client9.com/resilient-software-engineering/</link><pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/resilient-software-engineering/</guid><description>As the velocity of application development has increased, so has the velocity (and success) of attackers. Given a massive hiring shortage of security professionals, how can we keep up and even get ahead? We can, if we change the role of security to one that is building systems that are resilient to security shocks. When we do this, we find the topics in security are quite different from what they used to be: How are we managing our software supply chain?</description></item><item><title>How To Program in C</title><link>https://www.client9.com/article/how-to-program-in-c/</link><pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/how-to-program-in-c/</guid><description>&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; program in C, here are a few references I&amp;rsquo;ve collected from the twitterverse. It should keep you busy for the next few&amp;hellip; years. And even then this only covers &lt;em&gt;the basics&lt;/em&gt;. You&amp;rsquo;ll need to do more research on concurrency, signals, testing and some other topics in security.&lt;/p&gt;</description></item><item><title>Five Interesting Injection Attacks</title><link>https://www.client9.com/article/five-interesting-injection-attacks/</link><pubDate>Sat, 23 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/five-interesting-injection-attacks/</guid><description>&lt;p&gt;Everyone is familiar with SQLi and XSS. To make things more interesting, here are five more unusual injection attacks that have appeared recently.&lt;/p&gt;</description></item><item><title>How do Open Source Software Product Companies Make Money?</title><link>https://www.client9.com/article/how-do-open-source-software-product-companies-make-money/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/how-do-open-source-software-product-companies-make-money/</guid><description>&lt;p&gt;How do Open Source product companies make money? As a consumer, user
and producer of OSS, I looked at a number of venture
capital-backed, open source software product (OSSP) companies to help
understand what their motivations are and where they might be going.&lt;/p&gt;</description></item><item><title>Using Subresource Integrity to Secure Externally Hosted Content</title><link>https://www.client9.com/article/using-subresource-integrity-to-secure-externally-hosted-content/</link><pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/using-subresource-integrity-to-secure-externally-hosted-content/</guid><description>&lt;p&gt;One simple trick that can prevent you from distributing malware or aiding a DDoS attack from your CDN.&lt;/p&gt;</description></item><item><title>Docker and Alpine Linux (and systemd)</title><link>https://www.client9.com/article/docker-and-alpine-linux-and-systemd/</link><pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/docker-and-alpine-linux-and-systemd/</guid><description>&lt;p&gt;This &lt;a href=&#34;https://news.ycombinator.com/item?id=11000827&#34;&gt;comment&lt;/a&gt; by the
&lt;a href=&#34;https://www.docker.com/company/management&#34;&gt;CTO of Docker&lt;/a&gt; on January
31, 2016 implied that &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; was shifting
the default base images from &lt;a href=&#34;http://www.ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; to
&lt;a href=&#34;http://alpinelinux.org&#34;&gt;Alpine Linux&lt;/a&gt;. What&amp;rsquo;s really going
on?&lt;/p&gt;</description></item><item><title>Size of Linux Distributions for the Cloud, 2016</title><link>https://www.client9.com/article/size-of-linux-distributions-for-the-cloud-2016/</link><pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/size-of-linux-distributions-for-the-cloud-2016/</guid><description>&lt;p&gt;The size of a fresh Linux install on EC2 is a rough proxy for it&amp;rsquo;s
complexity, how big the attack surface is and how frequently it will
need updates. Less is definitely &lt;em&gt;more&lt;/em&gt;. In 2015, I &lt;a href=&#34;https://www.client9.com/article/comparison-of-linux-distributions-on-aws-ec2/&#34;&gt;compared the
number of packages on default install on AWS
EC2&lt;/a&gt;. Let&amp;rsquo;s
see how things changed or not. This time, in addition to the number
of packages installed, I also checked on-disk image size. Corrections
and additions welcome.&lt;/p&gt;</description></item><item><title>Golang and Gracefully Handling Lists in Configuration Files</title><link>https://www.client9.com/article/golang-and-gracefully-handling-lists-in-configuration-files/</link><pubDate>Fri, 05 Feb 2016 16:01:07 -0800</pubDate><guid>https://www.client9.com/article/golang-and-gracefully-handling-lists-in-configuration-files/</guid><description>&lt;p&gt;Most configuration files are processed using &amp;lsquo;object unmarshaling&amp;rsquo; (or
deserialization) into internal data structures. While this is easy
and fast, it&amp;rsquo;s not very flexible for &lt;em&gt;configuration&lt;/em&gt;. In most cases
a &amp;ldquo;single value&amp;rdquo; and an element with a single value are treated
differently.&lt;/p&gt;</description></item><item><title>BYOD Bring Your Own Dependencies</title><link>https://www.client9.com/byod-bring-your-own-dependencies/</link><pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate><guid>https://www.client9.com/byod-bring-your-own-dependencies/</guid><description>First presented at DevOpsDays Austin, Texas on May 15, 2015.
Most memorable about this talk was a well know audience member decided I was attacking docker and made it clear to the entire convention that he was not happy with me. Afterwards, a number of people came up to me and said “so this is what devops is all about? Does this normally happen? That was really rough.” You can decide if the presentation is unfair to docker.</description></item><item><title>Secure Application Development with Golang</title><link>https://www.client9.com/secure-application-development-with-golang/</link><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>https://www.client9.com/secure-application-development-with-golang/</guid><description>First presented at RSA USA 2015, Session ASD-F02 on April 24, 2015 in San Francisco, California.
This might be the worst slide template I have ever used:
Fonts are too small Fonts are microsoft-specific Font color is grey Background is grey Background has pattern It would seem it’s specifically designed for not-reading. But if you can read it, the deck is still accurate in 2018.</description></item><item><title>Comparison of Linux Distributions on AWS EC2</title><link>https://www.client9.com/article/comparison-of-linux-distributions-on-aws-ec2/</link><pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/comparison-of-linux-distributions-on-aws-ec2/</guid><description>&lt;p&gt;How do various Linux distributions implement a operating system for
use in virtualized or cloud environments? One proxy for
size and complexity is the number of packages installed. While not a perfect
comparison, in general, less is more. In Amazon&amp;rsquo;s US-WEST-1 region, I fired up
the a number of Linux distributions and counted the number of packages
installed.&lt;/p&gt;</description></item><item><title>libinjection: From SQLI to XSS v2</title><link>https://www.client9.com/libinjection-from-sqli-to-xss-v2/</link><pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate><guid>https://www.client9.com/libinjection-from-sqli-to-xss-v2/</guid><description>“libinjection: From SQLI to XSS” (version 2) was first presented at Code Blue, Tokyo Japan on 2014-02-18, in English and 日本語.</description></item><item><title>libinjection: From SQLI to XSS v1</title><link>https://www.client9.com/libinjection-from-sqli-to-xss-v1/</link><pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate><guid>https://www.client9.com/libinjection-from-sqli-to-xss-v1/</guid><description>“libinjection: From SQLI to XSS” (version 1) was first presented at OWASP AppSec SoCal, in Santa Monica, California.</description></item><item><title>The Origins of Insecurity</title><link>https://www.client9.com/the-origins-of-insecurity/</link><pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/the-origins-of-insecurity/</guid><description>A very round about of way of trying to get security folks involved in the software development process.
The Origins of Insecurity first presented at LASCON 2013, in Austin, Texas.</description></item><item><title>Making Operations Visible</title><link>https://www.client9.com/making-operations-visible/</link><pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/making-operations-visible/</guid><description> Video More DevOpsDays Tokyo Coverage Not necessarily related to this presentation.
Video Media posts https://itpro.nikkeibp.co.jp/article/NEWS/20130930/507682/ https://itpro.nikkeibp.co.jp/article/NEWS/20130930/507755/ https://itpro.nikkeibp.co.jp/article/NEWS/20131001/507959/ https://www.publickey1.jp/blog/13/devopsdevops_day_tokyo_2013.html https://www.publickey1.jp/blog/13/devopsdevops_day_tokyo_2013_1.html https://www.publickey1.jp/blog/13/githubdevopsboxenhubotdevops_day_tokyo_2013.html https://www.publickey1.jp/blog/13/githubboxenhubotdevops_day_tokyo_2013.html https://www.publickey1.jp/blog/13/devopsdevops_day_tokyo_2013_2.html Attendee posts https://mass.hatenablog.com/entry/2013/09/28/205309 https://d.hatena.ne.jp/n-sega/20130928/1380373634 https://kazuph.hateblo.jp/entry/2013/09/28/152302 https://jedipunkz.github.io/blog/2013/09/29/devops-day-tokyo-2013-report/ https://toshi-miura.hatenablog.com/entry/2013/09/29/222609 https://codezine.jp/article/detail/7438</description></item><item><title>Faster Secure Software Development with Continuous Deployment</title><link>https://www.client9.com/faster-secure-software-development-with-continuous-deployment/</link><pubDate>Fri, 24 May 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/faster-secure-software-development-with-continuous-deployment/</guid><description>First presented at PHDays on May 24, 2013 in Moscow, Russia.
Why don&amp;#39;t developers care about security issues? Why isn&amp;#39;t security training effective? Why do basic application security problems continue to exist? One reason is that long release cycles disenfranchise developers from caring or even knowing about security or operational issues. Continuous Deployment helps address this by small, but frequent, changes to the production environment. At first, this would seem less stable and less secure, however continuous deployment is a lot more than &amp;#34;pushing code&amp;#34;.</description></item><item><title>Fixing Security by Fixing Development using Continuous Deployment</title><link>https://www.client9.com/fixing-security-by-fixing-development-using-continuous-deployment/</link><pubDate>Tue, 14 May 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/fixing-security-by-fixing-development-using-continuous-deployment/</guid><description>First presented at Security Development Conference on May 14, 2013 in San Francisco, USA.
Do you have an effective release cycle? Is your process long and archaic? Long release cycle are typically based on assumptions we haven&amp;#39;t seen since the 1980s and require very mature organizations to implement successfully. They can also disenfranchise developers from caring or even knowing about security or operational issues. Attend this session to learn more about an alternative approach to managing deployments through Continuous Deployment, otherwise known as Continuous Delivery.</description></item><item><title>Care and Feeding of Large Scale Graphite Installations</title><link>https://www.client9.com/care-and-feeding-of-large-scale-graphite-installations/</link><pubDate>Wed, 01 May 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/care-and-feeding-of-large-scale-graphite-installations/</guid><description>First presented at DevOpsDays on May 1, 2013 in Austin, Texas.</description></item><item><title>SQL-RISC New Directions in SQLi Prevention</title><link>https://www.client9.com/sql-risc-new-directions-in-sqli-prevention/</link><pubDate>Wed, 27 Feb 2013 00:00:00 +0000</pubDate><guid>https://www.client9.com/sql-risc-new-directions-in-sqli-prevention/</guid><description>First presented at RSA USA 2013 on February 27, 2013 in San Francisco, California.</description></item><item><title>DevOps The Internal User Growth Team</title><link>https://www.client9.com/article/devops-the-internal-user-growth-team/</link><pubDate>Mon, 31 Dec 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/devops-the-internal-user-growth-team/</guid><description>PuppetLabs invited me to guest-write for their blog. I thought about the future of DevOps and what it means after you get done automating basic infrastructure. The end result is DevOps: The Internal User Growth Team, which was the last blog post of year.
Special thanks to Michelle Carroll for outstanding copy-editing.</description></item><item><title>Rebooting (secure) (web) software development with Continuous Deployment</title><link>https://www.client9.com/rebooting-secure-web-software-development-with-continuous-deployment/</link><pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/rebooting-secure-web-software-development-with-continuous-deployment/</guid><description>First presented at OWASP AppSec USA on October 25, 2012 in Austin, Texas.
Original Abstract:
If we are ever going to get ahead of the whack-a-mole security vulnerability game, we, as security professionals need to start getting involved more in the development of software. Let&amp;#39;s review the origins of the traditional software development, and what assumptions are made. Then we&amp;#39;ll review if those assumptions still hold for modern web applications, and what problems they cause, especially for security.</description></item><item><title>libinjection and SQLi Obfuscation</title><link>https://www.client9.com/libinjection-and-sqli-obfuscation/</link><pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/libinjection-and-sqli-obfuscation/</guid><description>First presented at OWASP NYC on September 20, 2012 at DTCC&amp;#39;s headquarters on 55 Water Street, New York City.</description></item><item><title>libinjection: New Techniques in Detecting SQLi Attacks</title><link>https://www.client9.com/libinjection-new-techniques-in-detecting-sqli-attacks/</link><pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/libinjection-new-techniques-in-detecting-sqli-attacks/</guid><description>First presented at iSEC Partners Open Forum on September 6, 2012 at Gilt Group, New York City.</description></item><item><title>Continuous Deployment, The New Number One Security Feature</title><link>https://www.client9.com/continuous-deployment-the-new-number-one-security-feature/</link><pubDate>Thu, 16 Aug 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/continuous-deployment-the-new-number-one-security-feature/</guid><description>First presented at Security BSides Los Angeles on August 16, 2012 in Hermosa Beach, California.</description></item><item><title>PHP Static Analysis 2012</title><link>https://www.client9.com/php-static-analysis-2012/</link><pubDate>Fri, 10 Aug 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/php-static-analysis-2012/</guid><description>Over at the Code as Craft blog by Etsy on how static analysis for PHP was done. Here’s the intro:
At Etsy we have three tiers of static analysis on our PHP code that run on every commit or runs periodically every hour. They form an important part of our continuous deployment pipeline along with one-button deploys, fast unit and functional tests, copious amounts of graphing, and a fantastic development environment to make sure code flows safely and securely to production.</description></item><item><title>New Techniques in SQLi Obfuscation</title><link>https://www.client9.com/new-techniques-in-sqli-obfuscation/</link><pubDate>Fri, 27 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/new-techniques-in-sqli-obfuscation/</guid><description>First presented Friday July 27, 2012 at DEFCON 20, Las Vegas, NV, at the RIO on 4:20pm.
Original abstract:
SQLi remains a popular sport in the security arms-race. However, after analysis of hundreds of thousands of real world SQLi attacks, output from SQLi scanners, published reports, analysis of WAF source code, and database vendor documentation, both SQLi attackers and defenders have missed a few opportunities. This talk will iterate through the dark corners of SQL for use in new obfuscated attacks, and show why they are problematic for regular-expression based WAFs.</description></item><item><title>libinjection: a C library for SQLi detection</title><link>https://www.client9.com/libinjection-a-c-library-for-sqli-detection/</link><pubDate>Wed, 25 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/libinjection-a-c-library-for-sqli-detection/</guid><description>First presented Wednesday July 25, 2012 at Black Hat USA, Las Vegas, NV. Augustus I/II at 2:45pm.
From the original abstract:
SQLi and other injection attacks remain the top OWASP and CERT vulnerability. Current detection attempts frequently involve a myriad of regular expressions which are not only brittle and error prone but also proven by Hanson and Patterson at Black Hat 2005 to never be a complete solution. libinjection is a new open source C library that detects SQLi using lexical analysis.</description></item><item><title>Better Random Numbers in PHP using /dev/urandom</title><link>https://www.client9.com/better-random-numbers-in-php-using-dev-urandom/</link><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/better-random-numbers-in-php-using-dev-urandom/</guid><description>First posted in the Code as Craft blog. Here’s the intro:
The design of PHP’s basic random number generators rand and it’s newer variant mt_rand is based off the C Standard Library. For better or worse, both use a single global state and this can be reset using stand (or mt_srand). This means anyone (a developer, a third party module, a library) could set the state to a fixed value and every random number following will be the same for every request.</description></item><item><title>Time Tested PHP: Advanced Testing Techniques with libtimemachine</title><link>https://www.client9.com/time-tested-php-advanced-testing-techniques-with-libtimemachine/</link><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/time-tested-php-advanced-testing-techniques-with-libtimemachine/</guid><description/></item><item><title>SANS AppSec Blog on Continuous Deployment and Security</title><link>https://www.client9.com/sans-appsec-blog-on-continuous-deployment-and-security/</link><pubDate>Mon, 04 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/sans-appsec-blog-on-continuous-deployment-and-security/</guid><description>Frank Kim asked me some tough questions on continuous deployment and what it means for security:
In Continuous Deployment, developers push software to production several times a day. Please explain how this reduces risk in development and operations. Many Appsec professionals are concerned that Agile development teams build software too fast to be secure. Continuous Deployment seems to accelerate this even more. How do security controls and checks fit into Continuous Deployment, and what controls and checks need to be done differently to keep up with the pace?</description></item><item><title>Robots, Graphs and Binary Search</title><link>https://www.client9.com/robots-graphs-and-binary-search/</link><pubDate>Thu, 24 May 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/robots-graphs-and-binary-search/</guid><description>Over at the Code as Craft blog by Etsy is a new article on detecting and monitoring robotic traffic and the use of a IP categorization database. Here’s the intro:
We love our human customers. That said we get a lot of traffic from robots too. This is great, especially when they use the Etsy API. However, they sometimes misbehave. And they misbehave frequently in the late hours, not unlike a legendary East Village nightclub.</description></item><item><title>Static Analysis for PHP</title><link>https://www.client9.com/static-analysis-for-php/</link><pubDate>Sat, 19 May 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/static-analysis-for-php/</guid><description>Also checkout the matching Code as Craft article on static analysis for PHP.</description></item><item><title>Rate-Limiting at Scale</title><link>https://www.client9.com/rate-limiting-at-scale/</link><pubDate>Tue, 01 May 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/rate-limiting-at-scale/</guid><description>Rate Limiting in Action Nick Galbreath, Director of Engineering, Etsy. Rate limiting is a useful technique to limit malicious and undesirable behavior on web services. This talk will present a simple rate limit implementation using memcached that allows one to easily add rate limiting anywhere in their application. We’ll then cover some (surprising) real-world uses of rate limits, how to distinguish between enthusiasm and maliciousness, and finally some of the common countermeasures that are used.</description></item><item><title>What You Can Learn From Small Companies about AppSec</title><link>https://www.client9.com/what-you-can-learn-from-small-companies-about-appsec/</link><pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/what-you-can-learn-from-small-companies-about-appsec/</guid><description>This was presented at SANS AppSec Summit, Las Vegas on April 30 2012. None of the presenters are really from “small companies,” but still useful seeing how different companies solve security problems.
4:05-5:00 p.m.What You Can Learn From Small Companies About AppSecModerator: SANS InstitutePanelists:Jim Bird, CTO, BIDS Trading TechnologiesNick Galbreath, Director of Engineering, EtsyCameron Morris, Software Security Specialist , PartNetApplication security is a big challenge for small organizations, too. The security problems are just as numerous, but the resources are fewer.</description></item><item><title>DevOpsSec Applying DevOps Principles to Security</title><link>https://www.client9.com/devopssec-applying-devops-principles-to-security/</link><pubDate>Tue, 03 Apr 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/devopssec-applying-devops-principles-to-security/</guid><description/></item><item><title>Fraud Engineering: Implementing a Cross-Functional Risk Strategy</title><link>https://www.client9.com/fraud-engineering-implementing-a-cross-functional-risk-strategy/</link><pubDate>Thu, 29 Mar 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/fraud-engineering-implementing-a-cross-functional-risk-strategy/</guid><description/></item><item><title>Google Safe Browsing without the Browser</title><link>https://www.client9.com/google-safe-browsing-without-the-browser/</link><pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate><guid>https://www.client9.com/google-safe-browsing-without-the-browser/</guid><description>Over at Etsy&amp;#39;s Code as Craft blog is a new article on using the Google Safe Browsing API to analyze user generated content for malware links on the server. Here’s the intro to the story:
At Etsy, we are constantly evaluating the security and safety of our members as they use the site. One way we do this is by analyzing user generated content (UGC) for possible problems. As part of the process we integrate results from the Google Safe Browsing (GSB) service.</description></item><item><title>Facebook Extends Fundamental Social Networking Privacy Patent</title><link>https://www.client9.com/article/facebook-extends-fundamental-social-networking-privacy-patent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.client9.com/article/facebook-extends-fundamental-social-networking-privacy-patent/</guid><description>One of many jobs Friendster (yes Friendster), was managing privacy issues. In 2010, Facebook purchased Friendster&amp;rsquo;s patents (for $40m!) and as part of the review process looked at extending or enhancing the original applications. The result of this is US Patent 8,219,500 which Chris Lunt @chrislunt and myself are listed as inventors.
System and method for managing information flow between members of an online social network An online social network is provided in which members of the online social network control who may view their personal information and who may communicate with them.</description></item></channel></rss>